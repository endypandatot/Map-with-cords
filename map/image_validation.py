"""
–ï–¥–∏–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import os
import logging

logger = logging.getLogger(__name__)

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)
ALLOWED_IMAGE_FORMATS = [
    '.jpg',
    '.jpeg',
    '.png',
    '.gif',
    '.webp',
    '.bmp'
]

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ MIME-—Ç–∏–ø—ã (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)
ALLOWED_MIME_TYPES = [
    'image/jpeg',
    'image/jpg',
    'image/png',
    'image/gif',
    'image/webp',
    'image/bmp'
]

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (1 –ú–ë)
MAX_IMAGE_SIZE_BYTES = 1 * 1024 * 1024
MAX_IMAGE_SIZE_MB = 1


def get_allowed_formats_string():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return ', '.join([fmt.upper().replace('.', '') for fmt in ALLOWED_IMAGE_FORMATS])


def is_valid_image_extension(filename):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞

    Args:
        filename (str): –ò–º—è —Ñ–∞–π–ª–∞

    Returns:
        bool: True –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ
    """
    if not filename or not isinstance(filename, str):
        return False
    file_ext = os.path.splitext(filename.lower())[1]
    return file_ext in ALLOWED_IMAGE_FORMATS


def is_valid_mime_type(mime_type):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø–∞

    Args:
        mime_type (str): MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞

    Returns:
        bool: True –µ—Å–ª–∏ MIME-—Ç–∏–ø –¥–æ–ø—É—Å—Ç–∏–º
    """
    if not mime_type or not isinstance(mime_type, str):
        return False
    return mime_type.lower() in ALLOWED_MIME_TYPES


def is_valid_image_size(size_in_bytes):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞

    Args:
        size_in_bytes (int): –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö

    Returns:
        bool: True –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–æ–ø—É—Å—Ç–∏–º
    """
    return size_in_bytes <= MAX_IMAGE_SIZE_BYTES


def validate_image_file(file):
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: —Ä–∞–∑–º–µ—Ä, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, MIME-—Ç–∏–ø

    Args:
        file: –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (Django UploadedFile)

    Returns:
        list: –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω)
    """
    errors = []
    logger.info(f"\n{'=' * 60}")
    logger.info(f"üîç VALIDATING FILE: {file.name}")
    logger.info(f"{'=' * 60}")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    file_size_mb = file.size / (1024 * 1024)
    logger.info(f"üì¶ File size: {file.size} bytes ({file_size_mb:.2f} MB)")

    if not is_valid_image_size(file.size):
        error_msg = f'–§–∞–π–ª {file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f} –ú–ë). –ú–∞–∫—Å–∏–º—É–º: {MAX_IMAGE_SIZE_MB} –ú–ë'
        logger.error(f"‚ùå {error_msg}")
        errors.append(error_msg)

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    file_ext = os.path.splitext(file.name.lower())[1]
    logger.info(f"üìÑ File extension: {file_ext}")

    if not is_valid_image_extension(file.name):
        error_msg = f'–§–∞–π–ª {file.name} –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {get_allowed_formats_string()}'
        logger.error(f"‚ùå {error_msg}")
        errors.append(error_msg)

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    logger.info(f"üè∑Ô∏è  Content-Type (from header): {file.content_type}")

    if not is_valid_mime_type(file.content_type):
        error_msg = f'–§–∞–π–ª {file.name} –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π MIME-—Ç–∏–ø: {file.content_type}. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {", ".join(ALLOWED_MIME_TYPES)}'
        logger.error(f"‚ùå {error_msg}")
        errors.append(error_msg)

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if errors:
        logger.error(f"‚ùå VALIDATION FAILED with {len(errors)} error(s)")
        for i, err in enumerate(errors, 1):
            logger.error(f"   {i}. {err}")
    else:
        logger.info(f"‚úÖ VALIDATION PASSED")

    logger.info(f"{'=' * 60}\n")
    return errors
