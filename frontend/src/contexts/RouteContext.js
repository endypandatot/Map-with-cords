import React, { createContext, useReducer, useEffect, useContext } from 'react';
import { appReducer, initialState } from '../reducers/appReducer';
import { useRoutes } from '../hooks/useRoutes';
import { usePoints } from '../hooks/usePoints';
import { useMapInteraction } from '../hooks/useMapInteraction';

/**
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –∏ —Ç–æ—á–∫–∞–º–∏
 */
export const RouteContext = createContext();

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
export const RouteProvider = ({ children }) => {
    const [state, dispatch] = useReducer(appReducer, initialState);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ö—É–∫–∏
    const routeHandlers = useRoutes(state, dispatch);
    const pointHandlers = usePoints(state, dispatch);
    const mapHandlers = useMapInteraction(state, dispatch);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        routeHandlers.fetchRoutes();
    }, []);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π currentRoute (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    useEffect(() => {
        console.log('üó∫Ô∏è Current Route changed:', {
            name: state.currentRoute?.name,
            pointsCount: state.currentRoute?.points?.length || 0,
            points: state.currentRoute?.points?.map(p => ({
                id: p.id,
                name: p.name,
                lat: p.lat,
                lon: p.lon
            })) || []
        });
    }, [state.currentRoute]);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const contextValue = {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        ...state,

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        ...routeHandlers,

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ—á–µ–∫
        ...pointHandlers,

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ä—Ç—ã
        ...mapHandlers,

        // Dispatch –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        dispatch,
    };

    return (
        <RouteContext.Provider value={contextValue}>
            {children}
        </RouteContext.Provider>
    );
};

/**
 * –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
export const useRouteContext = () => {
    const context = useContext(RouteContext);
    if (!context) {
        throw new Error('useRouteContext must be used within RouteProvider');
    }
    return context;
};
