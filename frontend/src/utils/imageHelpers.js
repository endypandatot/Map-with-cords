/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ—á–∫–∏ - —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –µ–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ URL —Å—Ç—Ä–æ–∫
 *
 * @param {Array} images - –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
 * @returns {Array<string>} –ú–∞—Å—Å–∏–≤ URL —Å—Ç—Ä–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export const processImages = (images) => {
    console.log('üñºÔ∏è processImages called with:', images);

    if (!images || !Array.isArray(images)) {
        console.warn('‚ö†Ô∏è processImages: invalid input, returning empty array');
        return [];
    }

    const processedImages = [];

    images.forEach((img, index) => {
        console.log(`   Processing image ${index + 1}:`, img);

        // –û–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º image (–∏–∑ Django API)
        if (img && typeof img === 'object' && img.image) {
            let imageUrl = img.image;

            // –ï—Å–ª–∏ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
            if (imageUrl.startsWith('/media/')) {
                const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';
                imageUrl = `${API_BASE_URL}${imageUrl}`;
            }

            console.log(`   ‚úÖ Image ${index + 1}: URL from object - ${imageUrl}`);
            processedImages.push(imageUrl);
        }
        // –°—Ç—Ä–æ–∫–∞ - URL –∏–ª–∏ Base64
        else if (typeof img === 'string') {
            if (img.startsWith('data:image/')) {
                console.log(`   ‚úÖ Image ${index + 1}: base64 data`);
                processedImages.push(img);
            } else if (img.startsWith('http://') || img.startsWith('https://')) {
                console.log(`   ‚úÖ Image ${index + 1}: full URL string`);
                processedImages.push(img);
            } else if (img.startsWith('/media/')) {
                const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';
                const fullUrl = `${API_BASE_URL}${img}`;
                console.log(`   ‚úÖ Image ${index + 1}: relative URL converted to ${fullUrl}`);
                processedImages.push(fullUrl);
            } else {
                console.warn(`   ‚ö†Ô∏è Image ${index + 1}: unknown string format:`, img.substring(0, 50));
            }
        }
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        else {
            console.warn(`   ‚ö†Ô∏è Image ${index + 1}: unknown format, skipping`);
        }
    });

    console.log('‚úÖ processImages result:', processedImages.length, 'valid images');
    return processedImages;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞
 * @param {Array} images - –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @returns {string|null} URL –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ null
 */
export const getFirstImage = (images) => {
    const processed = processImages(images);
    return processed.length > 0 ? processed[0] : null;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Array} images - –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @returns {boolean}
 */
export const hasImages = (images) => {
    const processed = processImages(images);
    return processed.length > 0;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @param {Array} images - –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @returns {number}
 */
export const getImagesCount = (images) => {
    const processed = processImages(images);
    return processed.length;
};
