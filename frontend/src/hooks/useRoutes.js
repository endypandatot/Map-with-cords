import { useCallback } from 'react';
import { routesApi, pointsApi } from '../api';
import { LIMITS, LIMIT_MESSAGES, checkLimits } from '../constants/limits';
import { ACTION_TYPES, UI_MODE } from '../constants/uiModes';

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
 * @param {Object} state - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {Function} dispatch - –§—É–Ω–∫—Ü–∏—è dispatch –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * @returns {Object} –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
 */
export const useRoutes = (state, dispatch) => {
    const { routes } = state;

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    const fetchRoutes = useCallback(async () => {
        try {
            dispatch({ type: ACTION_TYPES.SET_LOADING, payload: true });
            const data = await routesApi.getAll();
            dispatch({ type: ACTION_TYPES.FETCH_ROUTES_SUCCESS, payload: data });
        } catch (error) {
            console.error('Error fetching routes:', error);
            dispatch({ type: ACTION_TYPES.SET_ERROR, payload: error.message });
        } finally {
            dispatch({ type: ACTION_TYPES.SET_LOADING, payload: false });
        }
    }, [dispatch]);

    /**
     * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    const startCreateRoute = useCallback(() => {
        if (!checkLimits.canCreateRoute(routes.length)) {
            alert(LIMIT_MESSAGES.MAX_ROUTES);
            return;
        }

        const newRoute = {
            id: `temp_${Date.now()}`,
            name: '',
            description: '',
            points: []
        };

        dispatch({ type: ACTION_TYPES.SET_CURRENT_ROUTE, payload: newRoute });
        dispatch({ type: ACTION_TYPES.SET_UI_MODE, payload: UI_MODE.CREATE_ROUTE });
    }, [routes.length, dispatch]);

    /**
     * –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    const startEditRoute = useCallback((routeId) => {
        const routeToEdit = routes.find(r => r.id === routeId);
        if (routeToEdit) {
            const clonedRoute = structuredClone(routeToEdit);
            dispatch({ type: ACTION_TYPES.SET_CURRENT_ROUTE, payload: clonedRoute });
            dispatch({ type: ACTION_TYPES.SET_UI_MODE, payload: UI_MODE.EDIT_ROUTE });
        }
    }, [routes, dispatch]);

    /**
     * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–∞ (—Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
     */
    const startViewRoute = useCallback((routeId) => {
        const routeToView = routes.find(r => r.id === routeId);
        if (routeToView) {
            const clonedRoute = structuredClone(routeToView);
            dispatch({ type: ACTION_TYPES.SET_CURRENT_ROUTE, payload: clonedRoute });
            dispatch({ type: ACTION_TYPES.SET_UI_MODE, payload: UI_MODE.VIEW_ROUTE_DETAILS });
        }
    }, [routes, dispatch]);

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
     */
    const handleSaveRoute = useCallback(async (routeData) => {
        console.log('üíæ Starting route save process...');
        console.log('üíæ Route data:', routeData);
        console.log('üíæ Points with images:', routeData.points?.map(p => ({
            name: p.name,
            id: p.id,
            imagesCount: p.images?.length || 0
        })));

        try {
            dispatch({ type: ACTION_TYPES.SET_LOADING, payload: true });

            let savedRoute;
            if (routeData.id && typeof routeData.id === 'number') {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
                console.log('üìù Updating existing route:', routeData.id);
                savedRoute = await routesApi.update(routeData.id, routeData);
                console.log('‚úÖ Route updated successfully:', savedRoute);
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
                console.log('‚ûï Creating new route');
                savedRoute = await routesApi.create(routeData);
                console.log('‚úÖ Route created successfully:', savedRoute);
            }

            console.log('üì§ Starting image upload process...');
            console.log('üì§ Saved route points:', savedRoute.points);
            console.log('üì§ Original route points:', routeData.points);

            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ç–æ—á–∫–∞–º –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ (–∏–Ω–¥–µ–∫—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç)
            for (let i = 0; i < savedRoute.points.length; i++) {
                const savedPoint = savedRoute.points[i];
                const originalPoint = routeData.points[i];

                console.log(`üì§ Processing point ${i}:`, {
                    savedPointName: savedPoint.name,
                    savedPointId: savedPoint.id,
                    originalPointName: originalPoint?.name,
                    originalPointImages: originalPoint?.images?.length || 0
                });

                if (originalPoint && originalPoint.images && originalPoint.images.length > 0) {
                    const base64Images = originalPoint.images.filter(img =>
                        typeof img === 'string' && img.startsWith('data:image/')
                    );

                    console.log(`üì§ Found ${base64Images.length} new images to upload for point ${savedPoint.id}`);

                    if (base64Images.length > 0) {
                        try {
                            console.log(`üì§ Uploading ${base64Images.length} images for point ${savedPoint.id}...`);
                            await pointsApi.uploadImages(savedPoint.id, base64Images);
                            console.log(`‚úÖ Images uploaded successfully for point ${savedPoint.id}`);
                        } catch (uploadError) {
                            console.error(`‚ùå Error uploading images for point ${savedPoint.id}:`, uploadError);
                            alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ—á–∫–∏ "${savedPoint.name}"`);
                        }
                    } else {
                        console.log(`‚ÑπÔ∏è No new images to upload for point ${savedPoint.id}`);
                    }
                } else {
                    console.log(`‚ÑπÔ∏è No images for point ${savedPoint.id}`);
                }
            }

            console.log('‚úÖ All images processed');

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
            await fetchRoutes();

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —Å–ø–∏—Å–∫—É
            dispatch({ type: ACTION_TYPES.CLEAR_CURRENT_ROUTE });
            dispatch({ type: ACTION_TYPES.SET_UI_MODE, payload: UI_MODE.MAIN_LIST });
        } catch (error) {
            console.error('‚ùå Error saving route:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
            dispatch({ type: ACTION_TYPES.SET_ERROR, payload: error.message });
        } finally {
            dispatch({ type: ACTION_TYPES.SET_LOADING, payload: false });
        }
    }, [dispatch, fetchRoutes]);

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    const handleDeleteRoute = useCallback(async (routeId) => {
        if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç?')) {
            return;
        }

        try {
            dispatch({ type: ACTION_TYPES.SET_LOADING, payload: true });
            await routesApi.delete(routeId);
            console.log(`‚úÖ Route ${routeId} deleted successfully`);
            await fetchRoutes();
        } catch (error) {
            console.error('Error deleting route:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞.');
            dispatch({ type: ACTION_TYPES.SET_ERROR, payload: error.message });
        } finally {
            dispatch({ type: ACTION_TYPES.SET_LOADING, payload: false });
        }
    }, [dispatch, fetchRoutes]);

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
     */
    const showMainList = useCallback(() => {
        dispatch({ type: ACTION_TYPES.CLEAR_CURRENT_ROUTE });
        dispatch({ type: ACTION_TYPES.CLEAR_PREVIEW_ROUTE });
        dispatch({ type: ACTION_TYPES.SET_UI_MODE, payload: UI_MODE.MAIN_LIST });
        dispatch({ type: ACTION_TYPES.SET_WAITING_FOR_COORDINATES, payload: false });
        dispatch({ type: ACTION_TYPES.SET_QUICK_CREATE_MODE, payload: false });
    }, [dispatch]);

    /**
     * –ù–∞—á–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
     */
    const handleRouteHoverStart = useCallback((routeId) => {
        const route = routes.find(r => r.id === routeId);
        if (route) {
            dispatch({ type: ACTION_TYPES.SET_PREVIEW_ROUTE, payload: route });
        }
    }, [routes, dispatch]);

    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–∞
     */
    const handleRouteHoverEnd = useCallback(() => {
        dispatch({ type: ACTION_TYPES.CLEAR_PREVIEW_ROUTE });
    }, [dispatch]);

    return {
        fetchRoutes,
        startCreateRoute,
        startEditRoute,
        startViewRoute,
        handleSaveRoute,
        handleDeleteRoute,
        showMainList,
        handleRouteHoverStart,
        handleRouteHoverEnd,
    };
};
