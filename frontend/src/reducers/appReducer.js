import { ACTION_TYPES, UI_MODE } from '../constants/uiModes';

/**
 * –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const initialState = {
    routes: [],
    currentRoute: null,
    previewRoute: null,
    pointToEdit: null,
    tempPointCoords: null,
    uiMode: UI_MODE.MAIN_LIST,
    isLoading: true,
    error: null,
    waitingForCoordinates: false,
    quickCreateMode: false,
};

/**
 * –†–µ–¥—å—é—Å–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {Object} state - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 * @param {Object} action - –î–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∏–ø–æ–º –∏ payload
 * @returns {Object} –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 */
export function appReducer(state, action) {
    switch (action.type) {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—à–∏–±–∫–∏
        case ACTION_TYPES.SET_LOADING:
            return { ...state, isLoading: action.payload };

        case ACTION_TYPES.SET_ERROR:
            return { ...state, error: action.payload, isLoading: false };

        // –ú–∞—Ä—à—Ä—É—Ç—ã
        case ACTION_TYPES.FETCH_ROUTES_SUCCESS:
            return { ...state, routes: action.payload, isLoading: false, error: null };

        case ACTION_TYPES.SET_CURRENT_ROUTE:
            console.log('üöÄ SET_CURRENT_ROUTE called with:', action.payload);
            return { ...state, currentRoute: action.payload };

        case ACTION_TYPES.CLEAR_CURRENT_ROUTE:
            return {
                ...state,
                currentRoute: null,
                pointToEdit: null,
                tempPointCoords: null,
                quickCreateMode: false
            };

        case ACTION_TYPES.UPDATE_CURRENT_ROUTE_POINTS:
            if (!state.currentRoute) return state;
            return {
                ...state,
                currentRoute: {
                    ...state.currentRoute,
                    points: action.payload
                }
            };

        // –ü—Ä–µ–≤—å—é –º–∞—Ä—à—Ä—É—Ç–∞
        case ACTION_TYPES.SET_PREVIEW_ROUTE:
            return { ...state, previewRoute: action.payload };

        case ACTION_TYPES.CLEAR_PREVIEW_ROUTE:
            return { ...state, previewRoute: null };

        // –¢–æ—á–∫–∏
        case ACTION_TYPES.SET_POINT_TO_EDIT:
            return { ...state, pointToEdit: action.payload };

        case ACTION_TYPES.CLEAR_POINT_TO_EDIT:
            return {
                ...state,
                pointToEdit: null,
                tempPointCoords: null,
                waitingForCoordinates: false
            };

        case ACTION_TYPES.SET_TEMP_POINT_COORDS:
            return { ...state, tempPointCoords: action.payload };

        // UI —Ä–µ–∂–∏–º—ã
        case ACTION_TYPES.SET_UI_MODE:
            return { ...state, uiMode: action.payload };

        case ACTION_TYPES.SET_WAITING_FOR_COORDINATES:
            return { ...state, waitingForCoordinates: action.payload };

        case ACTION_TYPES.SET_QUICK_CREATE_MODE:
            return { ...state, quickCreateMode: action.payload };

        default:
            return state;
    }
}
